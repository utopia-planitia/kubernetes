stages:
  - prepare
  - pre-provision
  - provision
  - build
  - tests
  - e2e parallel
  - e2e serial
  - destroy

variables:
  DEV_TOOLS_IMAGE:            ${DOCKER_REGISTRY_INTERNAL}/${CI_PROJECT_PATH_SLUG}/dev-tools:${CI_COMMIT_SHA}
  E2E_IMAGE:                  ${DOCKER_REGISTRY_INTERNAL}/${CI_PROJECT_PATH_SLUG}/e2e-tests:${CI_COMMIT_SHA}
  KUBECONFIG:                 ${CI_PROJECT_DIR}/certificates/master/admin-kube-config
  E2E_PARALLELIZATION:        25
  OVH_REGION_NAME:            SBG3
  CI_PROVISION:               ovh
  OVH_NODES_PREFIX:           ci-${CI_PIPELINE_ID}
  OVH_KEYPAIR_NAME:           utopia-planitia-ci-runner
  DIGITAL_OCEAN_NODES_PREFIX: ci-${CI_PIPELINE_ID}
  DIGITAL_OCEAN_KEYPAIR_NAME: utopia-planitia-ci-runner

dev-tools image:
  stage: prepare
  image: ${DOCKER_IMAGE}
  script:
    - docker build -t ${DEV_TOOLS_IMAGE} -f docker/dev-tools/Dockerfile .
    - docker push ${DEV_TOOLS_IMAGE}

e2e-tests image:
  stage: prepare
  image: ${DOCKER_IMAGE}
  script:
    - docker build -t ${E2E_IMAGE} docker/e2e-tests
    - docker push ${E2E_IMAGE}

lint:
  stage: pre-provision
  image: ${DEV_TOOLS_IMAGE}
  allow_failure: true
  script:
    - ansible-lint *.yml roles

.node: &node
  stage: pre-provision
  image: ${DEV_TOOLS_IMAGE}
  script:
    - mkdir -p ~/.ssh/${CI_PROVISION}
    - echo ${SSH_KEY_PRIVATE} | base64 -d > ~/.ssh/${CI_PROVISION}/id_rsa
    - echo ${SSH_KEY_PUBLIC}  | base64 -d > ~/.ssh/${CI_PROVISION}/id_rsa.pub
    - chmod 400 ~/.ssh/${CI_PROVISION}/id_rsa ~/.ssh/${CI_PROVISION}/id_rsa.pub
    - touch inventory
    - make ${CI_PROVISION}-destroy
    - make ${CI_PROVISION}-provision
    - make benchmark-nodes

node1:
  <<: *node
  retry: 2
  variables:
    ANSIBLE_OPTIONS: -e PROVISION_NODE=node1

node2:
  <<: *node
  retry: 2
  variables:
    ANSIBLE_OPTIONS: -e PROVISION_NODE=node2

node3:
  <<: *node
  retry: 2
  variables:
    ANSIBLE_OPTIONS: -e PROVISION_NODE=node3

node4:
  <<: *node
  retry: 2
  variables:
    ANSIBLE_OPTIONS: -e PROVISION_NODE=node4


destroy now:
  stage: pre-provision
  image: ${DEV_TOOLS_IMAGE}
  retry: 2
  script:
    - make ${CI_PROVISION}-destroy
  when: manual

provision:
  stage: provision
  image: ${DEV_TOOLS_IMAGE}
  script:
    - mkdir -p ~/.ssh/${CI_PROVISION}
    - echo ${SSH_KEY_PRIVATE} | base64 -d > ~/.ssh/${CI_PROVISION}/id_rsa
    - echo ${SSH_KEY_PUBLIC}  | base64 -d > ~/.ssh/${CI_PROVISION}/id_rsa.pub
    - chmod 400 ~/.ssh/${CI_PROVISION}/id_rsa ~/.ssh/${CI_PROVISION}/id_rsa.pub
    - touch inventory
    - make ${CI_PROVISION}-provision
    - make certificates
    - cat inventory
  artifacts:
    paths:
      - certificates
      - inventory
      - host_vars

destroy:
  stage: destroy
  image: ${DEV_TOOLS_IMAGE}
  retry: 2
  script:
    - make ${CI_PROVISION}-destroy

deploy:
  stage: build
  image: ${DEV_TOOLS_IMAGE}
  retry: 2
  script:
    - mkdir -p ~/.ssh/${CI_PROVISION}
    - echo ${SSH_KEY_PRIVATE} | base64 -d > ~/.ssh/${CI_PROVISION}/id_rsa
    - echo ${SSH_KEY_PUBLIC}  | base64 -d > ~/.ssh/${CI_PROVISION}/id_rsa.pub
    - chmod 400 ~/.ssh/${CI_PROVISION}/id_rsa ~/.ssh/${CI_PROVISION}/id_rsa.pub
    - make deploy
  artifacts:
    paths:
      - certificates/users

redeploy:
  stage: tests
  image: ${DEV_TOOLS_IMAGE}
  retry: 2
  script:
    - mkdir -p ~/.ssh/${CI_PROVISION}
    - echo ${SSH_KEY_PRIVATE} | base64 -d > ~/.ssh/${CI_PROVISION}/id_rsa
    - echo ${SSH_KEY_PUBLIC}  | base64 -d > ~/.ssh/${CI_PROVISION}/id_rsa.pub
    - chmod 400 ~/.ssh/${CI_PROVISION}/id_rsa ~/.ssh/${CI_PROVISION}/id_rsa.pub
    - make deploy | tee deploy.log
    - grep "changed=0    unreachable=0    failed=0" deploy.log | wc -l | grep 4

bats:
  stage: tests
  image: ${DEV_TOOLS_IMAGE}
  retry: 2
  script:
    - mkdir -p ~/.ssh/${CI_PROVISION}
    - echo ${SSH_KEY_PRIVATE} | base64 -d > ~/.ssh/${CI_PROVISION}/id_rsa
    - echo ${SSH_KEY_PUBLIC}  | base64 -d > ~/.ssh/${CI_PROVISION}/id_rsa.pub
    - chmod 400 ~/.ssh/${CI_PROVISION}/id_rsa ~/.ssh/${CI_PROVISION}/id_rsa.pub
    - make bats

cleanup e2e ns:
  stage: e2e parallel
  image: ${DEV_TOOLS_IMAGE}
  script:
    - make delete-e2e-namespaces
  when: manual

conformance:
  stage: e2e parallel
  image: ${E2E_IMAGE}
  retry: 2
  script:
    - make delete-e2e-namespaces
    - make conformance
    - make port-forward

serial conformance:
  stage: e2e serial
  image: ${E2E_IMAGE}
  retry: 2
  script:
    - make delete-e2e-namespaces
    - make serial
