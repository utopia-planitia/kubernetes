stages:
  - prepare
  - certificates
  - build
  - tests
  - serial 1
  - destroy

variables:
  DEV_TOOLS_IMAGE: ${CI_REGISTRY_IMAGE}-tools:v3
  KUBECONFIG:      ${CI_PROJECT_DIR}/certificates/master/admin-kube-config

lint:
  stage: prepare
  image: ${DEV_TOOLS_IMAGE}
  script:
    - ansible-lint *.yml roles

provision:
  stage: prepare
  image: ${DEV_TOOLS_IMAGE}
  retry: 2
  script:
    - mkdir ~/.ssh
    - echo ${SSH_KEY_PRIVATE} | base64 -d > ~/.ssh/id_rsa
    - echo ${SSH_KEY_PUBLIC}  | base64 -d > ~/.ssh/id_rsa.pub
    - chmod 400 ~/.ssh/id_rsa ~/.ssh/id_rsa.pub
    - touch inventory
    - ansible-playbook ovh-provision.yml -e "OVH_NODES_PREFIX=ci-${CI_PIPELINE_ID} OVH_KEYPAIR_NAME=ci-runner" ${ANSIBLE_OPTIONS} || ( sleep 90 && false )
  artifacts:
    paths:
      - inventory

destroy:
  stage: destroy
  image: ${DEV_TOOLS_IMAGE}
  retry: 2
  script:
    - ansible-playbook ovh-destroy.yml -e "OVH_NODES_PREFIX=ci-${CI_PIPELINE_ID}" ${ANSIBLE_OPTIONS}

destroy now:
  stage: destroy
  image: ${DEV_TOOLS_IMAGE}
  retry: 2
  script:
    - ansible-playbook ovh-destroy.yml -e "OVH_NODES_PREFIX=ci-${CI_PIPELINE_ID}" ${ANSIBLE_OPTIONS}
  when: manual

certificates:
  stage: certificates
  image: ${DEV_TOOLS_IMAGE}
  retry: 2
  script:
    - ansible-playbook certificates.yml ${ANSIBLE_OPTIONS}
  artifacts:
    paths:
      - certificates

deploy:
  stage: build
  image: ${DEV_TOOLS_IMAGE}
  retry: 2
  script:
    - mkdir ~/.ssh
    - echo ${SSH_KEY_PRIVATE} | base64 -d > ~/.ssh/id_rsa
    - echo ${SSH_KEY_PUBLIC}  | base64 -d > ~/.ssh/id_rsa.pub
    - chmod 400 ~/.ssh/id_rsa ~/.ssh/id_rsa.pub
    - ansible-playbook deploy.yml ${ANSIBLE_OPTIONS}
    - bash etc/wait-for-nodes.sh
    - kubectl apply -f addons/ -f certificates/addons/
    - bash etc/wait-for-addons.sh

redeploy:
  stage: tests
  image: ${DEV_TOOLS_IMAGE}
  retry: 2
  script:
    - mkdir ~/.ssh
    - echo ${SSH_KEY_PRIVATE} | base64 -d > ~/.ssh/id_rsa
    - echo ${SSH_KEY_PUBLIC}  | base64 -d > ~/.ssh/id_rsa.pub
    - chmod 400 ~/.ssh/id_rsa ~/.ssh/id_rsa.pub
    - ansible-playbook deploy.yml ${ANSIBLE_OPTIONS} | tee deploy.log
    - grep "changed=0    unreachable=0    failed=0" deploy.log | wc -l | grep 4

overlay2:
  stage: tests
  image: ${DEV_TOOLS_IMAGE}
  retry: 2
  script:
    - mkdir ~/.ssh
    - echo ${SSH_KEY_PRIVATE} | base64 -d > ~/.ssh/id_rsa
    - echo ${SSH_KEY_PUBLIC}  | base64 -d > ~/.ssh/id_rsa.pub
    - chmod 400 ~/.ssh/id_rsa ~/.ssh/id_rsa.pub
    - bats tests/overlay2.bats

kube-dns:
  stage: tests
  image: ${DEV_TOOLS_IMAGE}
  retry: 2
  script:
    - bats tests/kube-dns.bats

ping:
  stage: tests
  image: ${DEV_TOOLS_IMAGE}
  retry: 2
  script:
    - bats tests/ping.bats

logging:
  stage: tests
  image: ${DEV_TOOLS_IMAGE}
  retry: 2
  script:
    - bats tests/logging.bats

conformance 1/2:
  stage: tests
  image: ${DEV_TOOLS_IMAGE}
  retry: 2
  script:
    - cd /go/src/k8s.io/kubernetes
    - go run hack/e2e.go -get=false -- -v -test -check-version-skew=false --provider=skeleton -test_args="--ginkgo.focus=\[Conformance\] --ginkgo.skip=\[Serial\]|\[Flaky\]|\[Feature:.+\]" --ginkgo-parallel

port forward:
  stage: tests
  image: ${DEV_TOOLS_IMAGE}
  retry: 2
  script:
    - cd /go/src/k8s.io/kubernetes
    - go run hack/e2e.go -get=false -- -v -test -check-version-skew=false --provider=skeleton -test_args="--ginkgo.focus=port-forward"

conformance 2/2:
  stage: serial 1
  image: ${DEV_TOOLS_IMAGE}
  retry: 2
  script:
    - cd /go/src/k8s.io/kubernetes
    - go run hack/e2e.go -get=false -- -v -test -check-version-skew=false --provider=skeleton -test_args="--ginkgo.focus=\[Serial\].*\[Conformance\]"
