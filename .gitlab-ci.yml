stages:
  - prepare
  - fast-tests
  - provision-nodes
  - inventory
  - deploy
  - tests
  - destroy

variables:
  DOCKER_IMAGE:            docker:17.06.0-ce
  DEV_TOOLS_IMAGE_SHA:     ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
  DEV_TOOLS_IMAGE_LATEST:  ${CI_REGISTRY_IMAGE}:latest
  KUBECONFIG: ${CI_PROJECT_DIR}/certificates/master/admin-kube-config

before_script:
  - mv .ssh ~/.ssh

devtools image:
  stage: prepare
  image: ${DOCKER_IMAGE}
  retry: 2
  services:
    - ${DOCKER_IMAGE}-dind
  variables:
    DOCKER_DRIVER:            overlay2
    DOCKER_HOST:              tcp://docker:2375
  before_script: []
  script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - docker pull ${DEV_TOOLS_IMAGE_LATEST} || true
    - docker build --pull --cache-from ${DEV_TOOLS_IMAGE_LATEST} -t ${DEV_TOOLS_IMAGE_SHA} docker
    - if [ "${CI_COMMIT_REF_NAME}" = "master" ]; then docker tag ${DEV_TOOLS_IMAGE_SHA} ${DEV_TOOLS_IMAGE_LATEST}; docker push ${DEV_TOOLS_IMAGE_LATEST}; fi
    - docker push ${DEV_TOOLS_IMAGE_SHA}

lint:
  stage: fast-tests
  image: ${DEV_TOOLS_IMAGE_SHA}
  before_script: []
  script:
    - ansible-lint *.yml roles

ssh key:
  stage: fast-tests
  image: ${DEV_TOOLS_IMAGE_SHA}
  before_script: []
  script:
    - mkdir .ssh
    - echo ${SSH_KEY_PRIVATE} | base64 -d > .ssh/id_rsa
    - echo ${SSH_KEY_PUBLIC}  | base64 -d > .ssh/id_rsa.pub
    - chmod 400 .ssh/id_rsa .ssh/id_rsa.pub
  artifacts:
    paths:
      - .ssh

.provision_node: &provision_node
  stage: provision-nodes
  image: ${DEV_TOOLS_IMAGE_SHA}
  retry: 2
  script:
    - ansible-playbook ovh-provision.yml -e "OVH_NODES_PREFIX=CI-${CI_PIPELINE_ID} OVH_NODE=${OVH_NODE} OVH_KEYPAIR_NAME=ci-runner" ${ANSIBLE_OPTIONS}

node1:
  <<: *provision_node
  variables:
    OVH_NODE: node1

node2:
  <<: *provision_node
  variables:
    OVH_NODE: node2

node3:
  <<: *provision_node
  variables:
    OVH_NODE: node3

node4:
  <<: *provision_node
  variables:
    OVH_NODE: node4

provision:
  stage: inventory
  image: ${DEV_TOOLS_IMAGE_SHA}
  retry: 2
  script:
    - touch inventory
    - ansible-playbook ovh-provision.yml -e "OVH_NODES_PREFIX=CI-${CI_PIPELINE_ID} OVH_KEYPAIR_NAME=ci-runner" ${ANSIBLE_OPTIONS}
  artifacts:
    paths:
      - inventory

destroy:
  stage: destroy
  image: ${DEV_TOOLS_IMAGE_SHA}
  retry: 2
  script:
    - ansible-playbook ovh-destroy.yml -e "OVH_NODES_PREFIX=CI-${CI_PIPELINE_ID}" ${ANSIBLE_OPTIONS}
  when: always

deploy:
  stage: deploy
  image: ${DEV_TOOLS_IMAGE_SHA}
  retry: 2
  script:
    - ansible-playbook deploy.yml ${ANSIBLE_OPTIONS}
  artifacts:
    paths:
      - certificates

redeploy:
  stage: tests
  image: ${DEV_TOOLS_IMAGE_SHA}
  retry: 2
  script:
    - ansible-playbook deploy.yml ${ANSIBLE_OPTIONS} | tee deploy.log
    - grep "changed=0    unreachable=0    failed=0" deploy.log | wc -l | grep 5

overlay2:
  stage: tests
  image: ${DEV_TOOLS_IMAGE_SHA}
  retry: 2
  script:
    - bats tests/overlay2.bats

kubelet:
  stage: tests
  image: ${DEV_TOOLS_IMAGE_SHA}
  retry: 2
  script:
    - bats tests/kubelet.bats

etcd:
  stage: tests
  image: ${DEV_TOOLS_IMAGE_SHA}
  retry: 2
  script:
    - bats tests/etcd.bats

master:
  stage: tests
  image: ${DEV_TOOLS_IMAGE_SHA}
  retry: 2
  script:
    - bats tests/master.bats

master-forwarder:
  stage: tests
  image: ${DEV_TOOLS_IMAGE_SHA}
  retry: 2
  script:
    - bats tests/master-forwarder.bats

kube-proxy:
  stage: tests
  image: ${DEV_TOOLS_IMAGE_SHA}
  retry: 2
  script:
    - bats tests/kube-proxy.bats
