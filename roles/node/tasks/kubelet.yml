
---

- name: create directories
  file:
    path: "{{ item }}"
    state: directory
    recurse: true
  with_items:
    - /etc/kubernetes/manifests/
    - /etc/kubelet/
    - /usr/local/bin/

- name: copy kubelet certificates
  copy:
    src: "{{ master_cert_dir }}/{{ item.local }}"
    dest: "/etc/kubelet/{{ item.remote }}"
  with_items:
    - { local: 'ca.pem', remote: 'ca.pem' }
    - { local: 'node-{{ inventory_hostname }}.pem', remote: 'kubelet.pem' }
    - { local: 'node-{{ inventory_hostname }}-key.pem', remote: 'kubelet-key.pem' }
    - { local: 'node-{{ inventory_hostname }}-kube-config', remote: 'kubeconfig' }
  no_log: true
  notify:
    - restart kubelet

- name: download kubelet binary
  get_url:
    url: "https://storage.googleapis.com/kubernetes-release/release/{{ kubernetes_version }}/bin/linux/amd64/kubelet"
    dest: /usr/local/bin/kubelet
    checksum: sha256:75c34afbd46fb3b85fc65d850a1615d0f8526d08531f01c07d4a9ad166e38fbe
    mode: 0771

- name: create kubelet service
  template:
    src: kubelet.service.j2
    dest: /etc/systemd/system/kubelet.service
  notify:
    - restart kubelet

- meta: flush_handlers

- name: start kubelet
  service:
    name: kubelet
    enabled: yes
    state: started

- name: wait for kubelet to be available
  wait_for:
    port: 10248

- name: configure logrotate
  template:
    src: kubelet-logrotate.j2
    dest: /etc/logrotate.d/kubelet
